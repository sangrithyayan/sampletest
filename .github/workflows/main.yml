name: python application

on:
  workflow_dispatch

jobs:
  build:
    name: Build & Test image
    runs-on: ubuntu-latest

    steps:
    - name: check out code
      uses: actions/checkout@v3
        
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build & save image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: kl-reply-tracker
        IMAGE_TAG: latest
      
      run: |
        docker image build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker save $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > warmup_images
    
    - name: Delete Old Artifacts
      uses: actions/github-script@v6
      id: artifact
      with:
        script: |
          const res = await github.rest.actions.listArtifactsForRepo({
          owner: context.repo.owner,
          repo: context.repo.repo,
          })

          res.data.artifacts
            .forEach(({ id }) => {
              github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: id,
            })
          })
          
    - name: Persist the workspace
      uses: actions/upload-artifact@v3
      with:
        name: warmup_images
        path: warmup_images
        
  Unit_test:
    name: Loading and testing the image
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download the workspace
      uses: actions/download-artifact@v3
      with:
        name: warmup_images
    
    - name: get docker image
      id: image
      run: >-
        echo "::set-output name=loaded_image::$(
          docker load -i warmup_images
        )"
    
    - name: Removing the string
      env: 
        OUTPUT_IMAGE: ${{ steps.image.outputs.loaded_image }} 
      run: |
        OUTPUT_IMAGE=${{ env.OUTPUT_IMAGE }} | cut -c 13-
        
    - name: Testing through docker
      run: docker run -i ${OUTPUT_IMAGE} run test
    
    - uses: geekyeggo/delete-artifact@v2
      with:
          name: my-artifact
    
